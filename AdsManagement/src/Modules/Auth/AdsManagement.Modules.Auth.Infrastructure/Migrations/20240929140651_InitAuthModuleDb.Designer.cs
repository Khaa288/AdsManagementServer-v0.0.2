// <auto-generated />
using System;
using AdsManagement.Modules.Auth.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20240929140651_InitAuthModuleDb")]
    partial class InitAuthModuleDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictId");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DistrictName");

                    b.HasKey("DistrictId");

                    b.ToTable("District", (string)null);
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Officer", b =>
                {
                    b.Property<Guid>("OfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfficerId");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2")
                        .HasColumnName("DoB");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<int>("WardId")
                        .HasColumnType("int")
                        .HasColumnName("WardId");

                    b.HasKey("OfficerId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.HasIndex("WardId")
                        .IsUnique();

                    b.ToTable("Officer", (string)null);
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Otp", b =>
                {
                    b.Property<Guid>("OtpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OtpId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiryDate");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("IsUsed");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfficerId");

                    b.Property<int>("OtpType")
                        .HasColumnType("int")
                        .HasColumnName("OtpType");

                    b.HasKey("OtpId");

                    b.HasIndex("OfficerId");

                    b.ToTable("Otp", (string)null);
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Privilege", b =>
                {
                    b.Property<Guid>("PrivilegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PrivilegeId");

                    b.Property<string>("PrivilegeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PrivilegeName");

                    b.HasKey("PrivilegeId");

                    b.ToTable("Privilege", (string)null);
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TokenId");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiryDate");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("IsUsed");

                    b.Property<Guid>("OfficerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfficerId");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Secret");

                    b.HasKey("TokenId");

                    b.HasIndex("OfficerId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .HasColumnType("int")
                        .HasColumnName("WardId");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictId");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WardName");

                    b.HasKey("WardId");

                    b.ToTable("Ward", (string)null);
                });

            modelBuilder.Entity("OfficerPrivilege", b =>
                {
                    b.Property<Guid>("OfficersOfficerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrivilegesPrivilegeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OfficersOfficerId", "PrivilegesPrivilegeId");

                    b.HasIndex("PrivilegesPrivilegeId");

                    b.ToTable("OfficerPrivilege");
                });

            modelBuilder.Entity("RolePrivilege", b =>
                {
                    b.Property<Guid>("PrivilegesPrivilegeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RolesRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrivilegesPrivilegeId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("RolePrivilege");
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Officer", b =>
                {
                    b.HasOne("AdsManagement.Modules.Auth.Domain.Entities.Role", "Role")
                        .WithOne("Officer")
                        .HasForeignKey("AdsManagement.Modules.Auth.Domain.Entities.Officer", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsManagement.Modules.Auth.Domain.Entities.Ward", "Ward")
                        .WithOne("Officer")
                        .HasForeignKey("AdsManagement.Modules.Auth.Domain.Entities.Officer", "WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Otp", b =>
                {
                    b.HasOne("AdsManagement.Modules.Auth.Domain.Entities.Officer", "Officer")
                        .WithMany("Otps")
                        .HasForeignKey("OfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Officer");
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("AdsManagement.Modules.Auth.Domain.Entities.Officer", "Officer")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("OfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Officer");
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Ward", b =>
                {
                    b.HasOne("AdsManagement.Modules.Auth.Domain.Entities.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("OfficerPrivilege", b =>
                {
                    b.HasOne("AdsManagement.Modules.Auth.Domain.Entities.Officer", null)
                        .WithMany()
                        .HasForeignKey("OfficersOfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsManagement.Modules.Auth.Domain.Entities.Privilege", null)
                        .WithMany()
                        .HasForeignKey("PrivilegesPrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolePrivilege", b =>
                {
                    b.HasOne("AdsManagement.Modules.Auth.Domain.Entities.Privilege", null)
                        .WithMany()
                        .HasForeignKey("PrivilegesPrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdsManagement.Modules.Auth.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Officer", b =>
                {
                    b.Navigation("Otps");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Role", b =>
                {
                    b.Navigation("Officer")
                        .IsRequired();
                });

            modelBuilder.Entity("AdsManagement.Modules.Auth.Domain.Entities.Ward", b =>
                {
                    b.Navigation("Officer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
